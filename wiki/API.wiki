#summary C++ API
= C++ API =
The whole library is currently contained in the header file *polymul.h*.

== Polynomial container class ==
For type safety and utility functions there is a class representing polynomials:
=== template<class numtype, int Nvar, int Ndeg> class polynomial; ===

Class that encapsulates binomial(Nvar+Ndeg,Ndeg) coefficients. It is safe to cast (with reinterpret_cast) an array of numtype to a polynomial, or vice versa. It is also safe to cast a polynomial to a polynomial type of lower degree, but with the same number of variables. The polynomial class supports access to the coefficients through the [] indexing operator, where the index is the order of the term described above. Nvar must be greater or equal to one, while Ndeg must be a non-negative number

The scalar type numtype can be any type that supports the + and * operators, and which has a commuting product.

The polynomial class has the following methods:
=== polynomial::polynomial(); ===
=== polynomial::polynomial(numtype c0); ===
Constructors for polynomial. If the c0 argument is given the polynomial is set to zero except the constant term which is set to c0.
=== void polynomial::zero(); ===
Set all coefficients to 0.
=== static int polynomial::size(); ===
Return the number of coefficients (terms). This is a compile-time constant.
=== numtype polynomial::eval(const numtype x[Nvar]); ===
Evaluate the polynomial at x. This is reasonable fast but may not be optimal in terms of number of multiplications and additions.
=== void polynomial::exponents(int term, int exponents[Nvar]); ===
Calculate the exponents of term, using a very slow method. This is intended for printing, not for fast computation.
=== int polynomial::term_index(int exponents[Nvar]); ===
Return the index of the term with exponents. Again, this is a slow function intended for printing and debugging.

== Multiplication functions ==
A few different functions are provided for multiplying polynomials. These functions are not methods of polynomial. Template arguments have been omitted below, check polymul.h for details. You can use these functions directly on coefficient arrays by using an appropriate reinterpret_cast.
=== void polymul(polynomial &dst, const polynomial &p1, const polynomial &p2); ===
Multiply two polynomials with the same number of variables, p1 and p2, and put the result in dst (a polynomial of the right degree to fit the product exactly). Note that the degree of p1 and p2 does not have to be the same, but dst must have the exact right order to be able to represent the product.

=== void taylormul(polynomial &dst, const polynomial &p1, const polynomial &p2); ===
Here dst, p1 and p2 are polynomials of the same degree. The product of p1 and p2 is put in dst, but only those terms up to the original order of the polynomials (the higher terms are not calculated). The name comes from the usefulness of this function in calculating the product of Taylor expansions.

=== void taylormul(polynomial &p1, const polynomial &p2); ===
Like taylormul(), but computes p1 = p1*p2 in-place, using no temporary storage.